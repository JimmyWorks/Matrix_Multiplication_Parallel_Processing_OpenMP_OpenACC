// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k;   
   
   #pragma acc data copyin(A, B) copy(C)
   {
      #pragma acc kernels loop gang(100), vector(512)
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         int sum = 0;
         #pragma acc reduction (+:sum)
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
   }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.002278, flops=7.0237e+07
L=200, M=10, N=100, elapsed=0.005044, flops=7.93021e+07
L=200, M=50, N=100, elapsed=0.024465, flops=8.17494e+07
L=200, M=100, N=100, elapsed=0.047907, flops=8.34951e+07
L=200, M=500, N=100, elapsed=0.233063, flops=8.58137e+07
L=200, M=1000, N=100, elapsed=0.497793, flops=8.03547e+07
L=200, M=2000, N=100, elapsed=1.02576, flops=7.79906e+07
L=200, M=5000, N=100, elapsed=3.25744, flops=6.1398e+07
L=200, M=10000, N=100, elapsed=8.35118, flops=4.78974e+07
L=200, M=100000, N=100, elapsed=132.984, flops=3.00789e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.007626, flops=2.09809e+07
L=200, M=10, N=100, elapsed=0.017132, flops=2.33481e+07
L=200, M=50, N=100, elapsed=0.081314, flops=2.4596e+07
L=200, M=100, N=100, elapsed=0.151831, flops=2.63451e+07
L=200, M=500, N=100, elapsed=0.748539, flops=2.67187e+07
L=200, M=1000, N=100, elapsed=1.47624, flops=2.70958e+07
L=200, M=2000, N=100, elapsed=2.95958, flops=2.70309e+07
L=200, M=5000, N=100, elapsed=7.58538, flops=2.63665e+07
L=200, M=10000, N=100, elapsed=15.8124, flops=2.52966e+07
L=200, M=100000, N=100, elapsed=188.158, flops=2.12587e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k;   
   
   #pragma acc data copyin(A, B) copyout(C)
   {
      #pragma acc kernels loop gang(100), vector(512)
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         int sum = 0;
         #pragma acc reduction (+:sum)
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
   }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.002219, flops=7.21046e+07
L=200, M=10, N=100, elapsed=0.004904, flops=8.15661e+07
L=200, M=50, N=100, elapsed=0.023639, flops=8.4606e+07
L=200, M=100, N=100, elapsed=0.046296, flops=8.64006e+07
L=200, M=500, N=100, elapsed=0.225094, flops=8.88518e+07
L=200, M=1000, N=100, elapsed=0.484843, flops=8.25009e+07
L=200, M=2000, N=100, elapsed=0.996809, flops=8.02561e+07
L=200, M=5000, N=100, elapsed=3.20925, flops=6.23198e+07
L=200, M=10000, N=100, elapsed=7.1142, flops=5.62256e+07
L=200, M=100000, N=100, elapsed=131.957, flops=3.03129e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.007873, flops=2.03226e+07
L=200, M=10, N=100, elapsed=0.016881, flops=2.36953e+07
L=200, M=50, N=100, elapsed=0.077684, flops=2.57453e+07
L=200, M=100, N=100, elapsed=0.149917, flops=2.66814e+07
L=200, M=500, N=100, elapsed=0.7376, flops=2.7115e+07
L=200, M=1000, N=100, elapsed=1.47303, flops=2.71548e+07
L=200, M=2000, N=100, elapsed=2.96632, flops=2.69695e+07
L=200, M=5000, N=100, elapsed=7.68748, flops=2.60163e+07
L=200, M=10000, N=100, elapsed=15.7051, flops=2.54694e+07
L=200, M=100000, N=100, elapsed=187.656, flops=2.13156e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k;   
   
   #pragma acc data copyin(A, B) copyout(C)
   {
      #pragma acc kernels loop gang
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        #pragma acc worker
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         int sum = 0;
         #pragma acc vector reduction (+:sum)
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
   }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.002283, flops=7.00832e+07
L=200, M=10, N=100, elapsed=0.00502, flops=7.96813e+07
L=200, M=50, N=100, elapsed=0.024555, flops=8.14498e+07
L=200, M=100, N=100, elapsed=0.048797, flops=8.19723e+07
L=200, M=500, N=100, elapsed=0.241453, flops=8.28319e+07
L=200, M=1000, N=100, elapsed=0.495084, flops=8.07944e+07
L=200, M=2000, N=100, elapsed=1.02388, flops=7.8134e+07
L=200, M=5000, N=100, elapsed=3.32542, flops=6.01428e+07
L=200, M=10000, N=100, elapsed=9.10897, flops=4.39128e+07
L=200, M=20000, N=100, elapsed=26.9272, flops=2.97098e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.007603, flops=2.10443e+07
L=200, M=10, N=100, elapsed=0.017483, flops=2.28794e+07
L=200, M=50, N=100, elapsed=0.079675, flops=2.5102e+07
L=200, M=100, N=100, elapsed=0.155642, flops=2.57e+07
L=200, M=500, N=100, elapsed=0.74055, flops=2.7007e+07
L=200, M=1000, N=100, elapsed=1.48377, flops=2.69584e+07
L=200, M=2000, N=100, elapsed=2.97668, flops=2.68756e+07
L=200, M=5000, N=100, elapsed=7.61673, flops=2.6258e+07
L=200, M=10000, N=100, elapsed=15.7532, flops=2.53916e+07
L=200, M=20000, N=100, elapsed=37.1511, flops=2.15337e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k;   
   
   #pragma acc data copyin(A, B) copyout(C)
   {
      #pragma acc kernels loop gang
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        #pragma acc worker
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         int sum = 0;
         #pragma acc vector reduction (+:sum)
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
   }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.0023, flops=6.95652e+07
L=200, M=10, N=100, elapsed=0.005073, flops=7.88488e+07
L=200, M=50, N=100, elapsed=0.02453, flops=8.15328e+07
L=200, M=100, N=100, elapsed=0.048422, flops=8.26071e+07
L=200, M=500, N=100, elapsed=0.238837, flops=8.37391e+07
L=200, M=1000, N=100, elapsed=0.499329, flops=8.01075e+07
L=200, M=2000, N=100, elapsed=1.01266, flops=7.9e+07
L=200, M=5000, N=100, elapsed=3.25104, flops=6.15187e+07
L=200, M=10000, N=100, elapsed=8.16306, flops=4.90012e+07
L=200, M=20000, N=100, elapsed=26.4034, flops=3.02991e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.007636, flops=2.09534e+07
L=200, M=10, N=100, elapsed=0.017787, flops=2.24883e+07
L=200, M=50, N=100, elapsed=0.080902, flops=2.47213e+07
L=200, M=100, N=100, elapsed=0.160691, flops=2.48925e+07
L=200, M=500, N=100, elapsed=0.742791, flops=2.69255e+07
L=200, M=1000, N=100, elapsed=1.48056, flops=2.70168e+07
L=200, M=2000, N=100, elapsed=2.99063, flops=2.67502e+07
L=200, M=5000, N=100, elapsed=7.57721, flops=2.63949e+07
L=200, M=10000, N=100, elapsed=16.0368, flops=2.49427e+07
L=200, M=20000, N=100, elapsed=37.4138, flops=2.13825e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k;   
   
   #pragma acc data copyin(A, B) copyout(C)
   {
      #pragma acc kernels loop
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         int sum = 0;
         #pragma acc reduction (+:sum)
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
   }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.002319, flops=6.89953e+07
L=200, M=10, N=100, elapsed=0.005056, flops=7.91139e+07
L=200, M=50, N=100, elapsed=0.023816, flops=8.39772e+07
L=200, M=100, N=100, elapsed=0.047207, flops=8.47332e+07
L=200, M=500, N=100, elapsed=0.236814, flops=8.44545e+07
L=200, M=1000, N=100, elapsed=0.497626, flops=8.03816e+07
L=200, M=2000, N=100, elapsed=1.047, flops=7.64089e+07
L=200, M=5000, N=100, elapsed=3.2508, flops=6.15233e+07
L=200, M=10000, N=100, elapsed=7.96744, flops=5.02043e+07
L=200, M=20000, N=100, elapsed=26.5788, flops=3.00992e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.007925, flops=2.01893e+07
L=200, M=10, N=100, elapsed=0.017032, flops=2.34852e+07
L=200, M=50, N=100, elapsed=0.076003, flops=2.63148e+07
L=200, M=100, N=100, elapsed=0.149049, flops=2.68368e+07
L=200, M=500, N=100, elapsed=0.753267, flops=2.6551e+07
L=200, M=1000, N=100, elapsed=1.47818, flops=2.70602e+07
L=200, M=2000, N=100, elapsed=2.97965, flops=2.68488e+07
L=200, M=5000, N=100, elapsed=7.85063, flops=2.54757e+07
L=200, M=10000, N=100, elapsed=16.1507, flops=2.47668e+07
L=200, M=20000, N=100, elapsed=37.3072, flops=2.14436e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k;   
   
   #pragma acc data copy(A, B, C) 
   {
      #pragma acc kernels loop
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         int sum = 0;
         #pragma acc reduction (+:sum)
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
   }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.002288, flops=6.99301e+07
L=200, M=10, N=100, elapsed=0.00504, flops=7.93651e+07
L=200, M=50, N=100, elapsed=0.022992, flops=8.69868e+07
L=200, M=100, N=100, elapsed=0.048379, flops=8.26805e+07
L=200, M=500, N=100, elapsed=0.228193, flops=8.76451e+07
L=200, M=1000, N=100, elapsed=0.497782, flops=8.03565e+07
L=200, M=2000, N=100, elapsed=1.11164, flops=7.19656e+07
L=200, M=5000, N=100, elapsed=3.2426, flops=6.16788e+07
L=200, M=10000, N=100, elapsed=7.65159, flops=5.22767e+07
L=200, M=20000, N=100, elapsed=26.6033, flops=3.00715e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.007928, flops=2.01816e+07
L=200, M=10, N=100, elapsed=0.017012, flops=2.35128e+07
L=200, M=50, N=100, elapsed=0.077, flops=2.5974e+07
L=200, M=100, N=100, elapsed=0.152181, flops=2.62845e+07
L=200, M=500, N=100, elapsed=0.740467, flops=2.701e+07
L=200, M=1000, N=100, elapsed=1.48776, flops=2.68861e+07
L=200, M=2000, N=100, elapsed=2.98083, flops=2.68382e+07
L=200, M=5000, N=100, elapsed=7.57719, flops=2.6395e+07
L=200, M=10000, N=100, elapsed=15.8166, flops=2.52899e+07
L=200, M=20000, N=100, elapsed=37.8224, flops=2.11515e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float * restrict C )
{
   int i, j, k, sum;   
   
      #pragma acc kernels loop reduction(+:sum)
      for( i=0; i<l; i++ )            // Loop over the rows of A and C.
      {
        for( k=0; k<n; k++ )            // Loop over the columns of B and C
        {
         sum = 0;
      // Initialize the output element for the inner
      // product of row i of A with column j of B
         for( j=0; j<m; j++ )            // Loop over the columns of A and C
         {
         sum += A[i*m+j] * B[j*n+k];   // Compute the inner product
         }
         C[i*n+k] = sum;
        }
      }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.002286, flops=6.99913e+07
L=200, M=10, N=100, elapsed=0.005044, flops=7.93021e+07
L=200, M=50, N=100, elapsed=0.023513, flops=8.50593e+07
L=200, M=100, N=100, elapsed=0.046523, flops=8.5979e+07
L=200, M=500, N=100, elapsed=0.238323, flops=8.39197e+07
L=200, M=1000, N=100, elapsed=0.503867, flops=7.9386e+07
L=200, M=2000, N=100, elapsed=1.04246, flops=7.67418e+07
L=200, M=5000, N=100, elapsed=3.26688, flops=6.12206e+07
L=200, M=10000, N=100, elapsed=7.84965, flops=5.09577e+07
L=200, M=20000, N=100, elapsed=26.5194, flops=3.01666e+07
OpenACC Runs
L=200, M=4, N=100, elapsed=0.008329, flops=1.921e+07
L=200, M=10, N=100, elapsed=0.018721, flops=2.13664e+07
L=200, M=50, N=100, elapsed=0.083747, flops=2.38815e+07
L=200, M=100, N=100, elapsed=0.164229, flops=2.43562e+07
L=200, M=500, N=100, elapsed=0.811144, flops=2.46565e+07
L=200, M=1000, N=100, elapsed=1.61825, flops=2.4718e+07
L=200, M=2000, N=100, elapsed=3.26135, flops=2.45297e+07
L=200, M=5000, N=100, elapsed=8.27103, flops=2.41808e+07
L=200, M=10000, N=100, elapsed=17.5585, flops=2.27809e+07
L=200, M=20000, N=100, elapsed=43.5154, flops=1.83843e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float *C )
{
    int i, j, k;
    int ompTrigger = m*n;

    // If problem size large enough, execute all i tasks in parallel keeping
    // private copies of k and j in each thread
    //if(ompTrigger >= OMP_MATMUL_TRIGGER) 
    #pragma omp parallel for private (k, j)
    for( i=0; i<l; i++ )         // Loop over the rows of A and C.
    {
        for( k=0; k<n; k++ )         // Loop over the columns of B and C
        {
            // Initialize the output element for the inner
            // product of row i of A with column j of B
            C[i*n+k] = 0;                  
            for( j=0; j<m; j++ )      // Loop over the columns of A and C
            {
                C[i*n+k] += A[i*m+j] * B[j*n+k];// Compute the inner product
            }
        }
    }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.003509, flops=4.5597e+07
L=200, M=10, N=100, elapsed=0.008531, flops=4.68878e+07
L=200, M=50, N=100, elapsed=0.042215, flops=4.73765e+07
L=200, M=100, N=100, elapsed=0.084468, flops=4.73552e+07
L=200, M=500, N=100, elapsed=0.396266, flops=5.04712e+07
L=200, M=1000, N=100, elapsed=0.783389, flops=5.10602e+07
L=200, M=2000, N=100, elapsed=1.57299, flops=5.08584e+07
L=200, M=5000, N=100, elapsed=4.24772, flops=4.7084e+07
L=200, M=10000, N=100, elapsed=9.91978, flops=4.03235e+07
L=200, M=20000, N=100, elapsed=27.0595, flops=2.95644e+07
OpenMP Runs
L=200, M=4, N=100, elapsed=0.003624, flops=4.41501e+07
L=200, M=10, N=100, elapsed=0.008488, flops=4.71254e+07
L=200, M=50, N=100, elapsed=0.042992, flops=4.65203e+07
L=200, M=100, N=100, elapsed=0.085201, flops=4.69478e+07
L=200, M=500, N=100, elapsed=0.386292, flops=5.17743e+07
L=200, M=1000, N=100, elapsed=0.770968, flops=5.18828e+07
L=200, M=2000, N=100, elapsed=1.54842, flops=5.16656e+07
L=200, M=5000, N=100, elapsed=4.19708, flops=4.76522e+07
L=200, M=10000, N=100, elapsed=9.4239, flops=4.24453e+07
L=200, M=20000, N=100, elapsed=26.8601, flops=2.97839e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float *C )
{
    int i, j, k;
    int ompTrigger = m*n;

    // If problem size large enough, execute all i tasks in parallel keeping
    // private copies of k and j in each thread
    //if(ompTrigger >= OMP_MATMUL_TRIGGER) 
    #pragma omp parallel for 
    for( i=0; i<l; i++ )         // Loop over the rows of A and C.
    {
        #pragma omp parallel for private (j)
        for( k=0; k<n; k++ )         // Loop over the columns of B and C
        {
            // Initialize the output element for the inner
            // product of row i of A with column j of B
            C[i*n+k] = 0;                  
            for( j=0; j<m; j++ )      // Loop over the columns of A and C
            {
                C[i*n+k] += A[i*m+j] * B[j*n+k];// Compute the inner product
            }
        }
    }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.003565, flops=4.48808e+07
L=200, M=10, N=100, elapsed=0.00853, flops=4.68933e+07
L=200, M=50, N=100, elapsed=0.040778, flops=4.90461e+07
L=200, M=100, N=100, elapsed=0.0805, flops=4.96894e+07
L=200, M=500, N=100, elapsed=0.387789, flops=5.15744e+07
L=200, M=1000, N=100, elapsed=0.771746, flops=5.18305e+07
L=200, M=2000, N=100, elapsed=1.55954, flops=5.12973e+07
L=200, M=5000, N=100, elapsed=4.23489, flops=4.72267e+07
L=200, M=10000, N=100, elapsed=9.62474, flops=4.15596e+07
L=200, M=20000, N=100, elapsed=27.1901, flops=2.94225e+07
OpenMP Runs
L=200, M=4, N=100, elapsed=0.004307, flops=3.71488e+07
L=200, M=10, N=100, elapsed=0.009279, flops=4.31081e+07
L=200, M=50, N=100, elapsed=0.041447, flops=4.82544e+07
L=200, M=100, N=100, elapsed=0.085586, flops=4.67366e+07
L=200, M=500, N=100, elapsed=0.392398, flops=5.09687e+07
L=200, M=1000, N=100, elapsed=0.770922, flops=5.18859e+07
L=200, M=2000, N=100, elapsed=1.56839, flops=5.10077e+07
L=200, M=5000, N=100, elapsed=4.46388, flops=4.48041e+07
L=200, M=10000, N=100, elapsed=10.3509, flops=3.86441e+07
L=200, M=20000, N=100, elapsed=39.2629, flops=2.03755e+07
// Matmul //
int matmul( int l, int m, int n, float *A, float *B, float *C )
{
    int i, j, k;
    int ompTrigger = m*n;

    // If problem size large enough, execute all i tasks in parallel keeping
    // private copies of k and j in each thread
    //if(ompTrigger >= OMP_MATMUL_TRIGGER) 
    #pragma omp parallel for if(ompTrigger >= OMP_MATMUL_TRIGGER) private (k, j)
    for( i=0; i<l; i++ )         // Loop over the rows of A and C.
    {
        for( k=0; k<n; k++ )         // Loop over the columns of B and C
        {
            // Initialize the output element for the inner
            // product of row i of A with column j of B
            C[i*n+k] = 0;                  
            for( j=0; j<m; j++ )      // Loop over the columns of A and C
            {
                C[i*n+k] += A[i*m+j] * B[j*n+k];// Compute the inner product
            }
        }
    }
}
Serial Runs
L=200, M=4, N=100, elapsed=0.003572, flops=4.47928e+07
L=200, M=10, N=100, elapsed=0.008429, flops=4.74552e+07
L=200, M=50, N=100, elapsed=0.042554, flops=4.69991e+07
L=200, M=100, N=100, elapsed=0.080774, flops=4.95209e+07
L=200, M=500, N=100, elapsed=0.386695, flops=5.17203e+07
L=200, M=1000, N=100, elapsed=0.779995, flops=5.12824e+07
L=200, M=2000, N=100, elapsed=1.58627, flops=5.04329e+07
L=200, M=5000, N=100, elapsed=4.3116, flops=4.63865e+07
L=200, M=10000, N=100, elapsed=9.79324, flops=4.08445e+07
L=200, M=20000, N=100, elapsed=27.3268, flops=2.92753e+07
OpenMP Runs
L=200, M=4, N=100, elapsed=0.003582, flops=4.46678e+07
L=200, M=10, N=100, elapsed=0.008499, flops=4.70644e+07
L=200, M=50, N=100, elapsed=0.041364, flops=4.83512e+07
L=200, M=100, N=100, elapsed=0.08037, flops=4.97698e+07
L=200, M=500, N=100, elapsed=0.390482, flops=5.12187e+07
L=200, M=1000, N=100, elapsed=0.774141, flops=5.16702e+07
L=200, M=2000, N=100, elapsed=1.56068, flops=5.12596e+07
L=200, M=5000, N=100, elapsed=4.25073, flops=4.70508e+07
L=200, M=10000, N=100, elapsed=9.02517, flops=4.43205e+07
L=200, M=20000, N=100, elapsed=27.2749, flops=2.9331e+07
